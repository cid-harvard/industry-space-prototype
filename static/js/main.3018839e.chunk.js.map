{"version":3,"sources":["components/CanvasIndustrySpaceCustom.js","App.js","index.js"],"names":["data","JSON","parse","rootNodeRef","useRef","useEffect","svgNode","current","root","height","window","innerHeight","width","innerWidth","allXValues","allYValues","nodes","forEach","graphics","x","y","push","xRange","d3","yRange","xScale","domain","range","yScale","canvas","append","attr","node","context","getContext","simulation","force","strength","id","d","transform","tempData","simulationUpdate","save","clearRect","translate","scale","k","edges","beginPath","moveTo","source","lineTo","target","strokeStyle","stroke","i","arc","Math","PI","fillStyle","color","fill","restore","call","scaleExtent","on","links","initGraph","createForceGraph","ref","App","CanvasIndustrySpaceCustom","ReactDOM","render","document","getElementById"],"mappings":"6QAIMA,EAAOC,KAAKC,MAAL,q54rBA2FE,aACb,IAAMC,EAAcC,iBAAO,MAW3B,OATAC,qBAAU,WACR,IAAIC,EAAU,KACVH,GAAeA,EAAYI,UAC7BD,EAAUH,EAAYI,QA/FH,SAACC,EAAMR,GAC9B,IAEMS,EAASC,OAAOC,YAChBC,EAASF,OAAOG,WAEhBC,EAAa,GACbC,EAAa,GACnBf,EAAKgB,MAAMC,SAAQ,YAAyB,IAAD,IAAtBC,SAAWC,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACjCN,EAAWO,KAAKF,GAChBJ,EAAWM,KAAKD,MAGlB,IAAME,EAASC,IAAUT,GACnBU,EAASD,IAAUR,GAEnBU,EAASF,MACZG,OAAOJ,GACPK,MAAM,CAAE,IAASf,EAAQ,MAEtBgB,EAASL,MACZG,OAAOF,GACPG,MAAM,CAAElB,EAAS,IAAK,MAInBoB,EAASrB,EAAKsB,OAAO,UACxBC,KAAK,QAASnB,EAAQ,MACtBmB,KAAK,SAAUtB,EAAS,MACxBuB,OAEGC,EAAUJ,EAAOK,WAAW,MAE5BC,EAAaZ,MACJa,MAAM,SAAUb,IAAeX,EAAQ,EAAGH,EAAS,IACnD2B,MAAM,SAAUb,MAAmBc,UAAU,KAC7CD,MAAM,OAAQb,MAAec,SAAS,GAAGC,IAAG,SAASC,GAAK,OAAOA,EAAED,OAE9EE,EAAYjB,KAIhB,SAAmBkB,GAiBjB,SAASC,IACPT,EAAQU,OAERV,EAAQW,UAAU,EAAG,EAAGhC,EAAOH,GAC/BwB,EAAQY,UAAUL,EAAUrB,EAAGqB,EAAUpB,GACzCa,EAAQa,MAAMN,EAAUO,EAAGP,EAAUO,GAErCN,EAASO,MAAM/B,SAAQ,SAASsB,GAC9BN,EAAQgB,YACRhB,EAAQiB,OAAOzB,EAAOc,EAAEY,OAAOjC,SAASC,GAAIS,EAAOW,EAAEY,OAAOjC,SAASE,IACrEa,EAAQmB,OAAO3B,EAAOc,EAAEc,OAAOnC,SAASC,GAAIS,EAAOW,EAAEc,OAAOnC,SAASE,IACrEa,EAAQqB,YAAc,qBACtBrB,EAAQsB,YAIVd,EAASzB,MAAMC,SAAQ,SAASsB,EAAGiB,GACjCvB,EAAQgB,YACRhB,EAAQwB,IAAIhC,EAAOc,EAAErB,SAASC,GAAIS,EAAOW,EAAErB,SAASE,GA5E3C,EA4EuD,EAAG,EAAIsC,KAAKC,IAAI,GAChF1B,EAAQ2B,UAAYrB,EAAEsB,MACtB5B,EAAQ6B,UAGR7B,EAAQ8B,UAjCZxC,IAAUM,GAAQmC,KAAKzC,MAAU0C,YAAY,CAAC,GAAQ,IAAIC,GAAG,QAL7D,WACE1B,EAAYjB,IAASiB,UACrBE,QAKFP,EAAWnB,MAAMyB,EAASzB,OACfkD,GAAG,OAAQxB,GAEtBP,EAAWC,MAAM,QACN+B,MAAM1B,EAASO,OAf5BoB,CAAUpE,GAyDNqE,CADY9C,IAAUjB,GACAN,MAEvB,CAACG,IAGF,yBAAKmE,IAAKnE,EAAaS,MAAO,IAAKH,OAAQ,OCjGhC8D,EARH,WACV,OACE,6BACE,kBAACC,EAAD,QCANC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3018839e.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport * as d3 from 'd3';\nimport raw from 'raw.macro';\n\nconst data = JSON.parse(raw('../data/industry-space.json'));\n\nconst createForceGraph = (root, data) => {\n  const radius = 3;\n\n  const height = window.innerHeight;\n  const width =  window.innerWidth;\n\n  const allXValues = [];\n  const allYValues = [];\n  data.nodes.forEach(({graphics: {x, y}}) => {\n    allXValues.push(x);\n    allYValues.push(y);\n  });\n\n  const xRange = d3.extent(allXValues);\n  const yRange = d3.extent(allYValues);\n\n  const xScale = d3.scaleLinear()\n    .domain(xRange)\n    .range([ 0 + 100, width - 100 ]);\n\n  const yScale = d3.scaleLinear()\n    .domain(yRange)\n    .range([ height - 100, 0 + 100]);\n\n\n\n  const canvas = root.append('canvas')\n    .attr('width', width + 'px')\n    .attr('height', height + 'px')\n    .node();\n\n  const context = canvas.getContext('2d');\n\n  const simulation = d3.forceSimulation()\n                .force(\"center\", d3.forceCenter(width / 2, height / 2))\n                .force(\"charge\", d3.forceManyBody().strength(-50))\n                .force(\"link\", d3.forceLink().strength(1).id(function(d) { return d.id; }))\n\n  let transform = d3.zoomIdentity;\n\n  initGraph(data)\n\n  function initGraph(tempData){\n\n    function zoomed() {\n      transform = d3.event.transform;\n      simulationUpdate();\n    }\n\n    d3.select(canvas).call(d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed))\n\n    simulation.nodes(tempData.nodes)\n              .on(\"tick\", simulationUpdate);\n\n    simulation.force(\"link\")\n              .links(tempData.edges);\n\n\n\n    function simulationUpdate(){\n      context.save();\n\n      context.clearRect(0, 0, width, height);\n      context.translate(transform.x, transform.y);\n      context.scale(transform.k, transform.k);\n\n      tempData.edges.forEach(function(d) {\n        context.beginPath();\n        context.moveTo(xScale(d.source.graphics.x), yScale(d.source.graphics.y));\n        context.lineTo(xScale(d.target.graphics.x), yScale(d.target.graphics.y));\n        context.strokeStyle = 'rgba(0, 0, 0, 0.1)'\n        context.stroke();\n      });\n\n      // Draw the nodes\n      tempData.nodes.forEach(function(d, i) {\n        context.beginPath();\n        context.arc(xScale(d.graphics.x), yScale(d.graphics.y), radius, 0, 2 * Math.PI, true);\n        context.fillStyle = d.color\n        context.fill();\n      });\n\n        context.restore();\n    }\n  }\n\n\n}\n\nexport default () => {\n  const rootNodeRef = useRef(null);\n\n  useEffect(() => {\n    let svgNode = null;\n    if (rootNodeRef && rootNodeRef.current) {\n      svgNode = rootNodeRef.current;\n      const svg = d3.select(svgNode);\n      createForceGraph(svg, data);\n    }\n  }, [rootNodeRef]);\n\n  return (\n    <div ref={rootNodeRef} width={500} height={500} />\n  );\n}\n","import React from 'react'\nimport CanvasIndustrySpaceCustom from './components/CanvasIndustrySpaceCustom';\n\nconst App = () => {\n  return (\n    <div>\n      <CanvasIndustrySpaceCustom />\n    </div>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}