{"version":3,"sources":["components/CanvasIndustrySpaceUMap.js","pages/IndustrySpaceUMap.js","../../node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","sector-legend.png","components/BasicLegend.js"],"names":["data","JSON","parse","naicsData","colorMap","id","color","rootNodeRef","useRef","useEffect","rootEl","current","root","d3","height","window","innerHeight","width","innerWidth","smallerSize","padding","widthMargin","heightMargin","rangeWidth","rangeHeight","allXValues","allYValues","nodes","forEach","x","y","push","radiusAdjuster","map","n","radius","Math","random","industry6Digit","find","code","toString","Error","naics_id","topLevelParentId","datum","parent_id","parseInt","console","error","xRange","yRange","xScale","domain","range","yScale","canvas","append","attr","node","context","getContext","simulation","force","strength","d","proximity","velocityDecay","k","alpha","tick","transform","tempData","zoom","scaleExtent","on","simulationUpdate","hoveredNode","undefined","highlightedNode","secondaryNodes","tertiaryNodes","canvasEl","dragsubject","invertX","invertY","i","length","nodeX","nodeY","dx","dy","applyX","applyY","highlightedId","save","clearRect","translate","scale","beginPath","arc","PI","fillStyle","polished","fill","style","cursor","strokeStyle","stroke","restore","call","event","nodesSortedByDistance","sortBy","node2","a","b","sqrt","slice","allEdgeXValues","allEdgeYValues","xBounds","yBounds","bounds","max","min","transition","duration","links","edges","initGraph","createForceGraph","innerHTML","ref","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","module","exports","Root","styled","div","Legend","img","tableLayout","paddingRight","src","require"],"mappings":"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","file":"static/js/36.dc38c91a.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport * as d3 from 'd3';\nimport raw from 'raw.macro';\nimport * as polished from 'polished';\nimport sortBy from 'lodash/sortBy';\n\nconst minExpectedScreenSize = 1020;\n\n// const data = JSON.parse(raw('../data/industry-space-with-start-positions.json'));\nconst data = JSON.parse(raw('../data/umap-custom-2.json'));\nconst naicsData = JSON.parse(raw('../data/naics_2017.json'));\n\nconst colorMap = [\n  { id: '0', color: '#A973BE' },\n  { id: '1', color: '#F1866C' },\n  { id: '2', color: '#FFC135' },\n  { id: '3', color: '#93CFD0' },\n  { id: '4', color: '#488098' },\n  { id: '5', color: '#77C898' },\n  { id: '6', color: '#6A6AAD' },\n  { id: '7', color: '#D35162' },\n  { id: '8', color: '#F28188' },\n]\n\nconst createForceGraph = (rootEl, data) => {\n  const root = d3.select(rootEl);\n\n  const height = window.innerHeight;\n  const width =  window.innerWidth;\n\n  const smallerSize = width < height ? width : height;\n  const padding = smallerSize * 0.1;\n  const widthMargin = (width - smallerSize) / 2;\n  const heightMargin = (height - (smallerSize * 0.9)) / 2;\n  const rangeWidth = width - padding - widthMargin;\n  const rangeHeight = height - padding - heightMargin;\n\n  const allXValues = [];\n  const allYValues = [];\n  data.nodes.forEach(({x, y}) => {\n    allXValues.push(x);\n    allYValues.push(y);\n  });\n\n  const radiusAdjuster = smallerSize / minExpectedScreenSize;\n\n  data.nodes = data.nodes.map(n => {\n    let radius = Math.random() * 6;\n    radius = radius < 2.5 ? 2.5 * radiusAdjuster : radius * radiusAdjuster;\n    // const radius = 2.5;\n    const industry6Digit = naicsData.find(({code}) => n.id.toString() === code);\n    if (!industry6Digit) {\n      throw new Error('undefined industry');\n      \n    }\n    const naics_id = industry6Digit.naics_id;\n    let topLevelParentId = naics_id.toString();\n    let current = naicsData.find(datum => datum.naics_id === naics_id);\n    while(current && current.parent_id !== null) {\n    // eslint-disable-next-line\n      current = naicsData.find(datum => datum.naics_id === current.parent_id);\n      if (current && current.parent_id !== null) {\n        topLevelParentId = current.parent_id.toString();\n      } else if (current && current.naics_id !== null) {\n        topLevelParentId = current.naics_id.toString();\n      }\n    }\n    if (parseInt(topLevelParentId, 10) > 8) {\n      console.error(current);\n      throw new Error('Parent out of range')\n    }\n    const {color} = colorMap.find(({id}) => id === topLevelParentId);\n    return {...n, radius, color}\n  })\n\n  const xRange = d3.extent(allXValues);\n  const yRange = d3.extent(allYValues);\n\n  const xScale = d3.scaleLinear()\n    .domain(xRange)\n    .range([0 + padding + widthMargin, rangeWidth]);\n\n  const yScale = d3.scaleLinear()\n    .domain(yRange)\n    .range([ rangeHeight, 0 + padding + heightMargin]);\n\n  const canvas = root.append('canvas')\n    .attr('width', width + 'px')\n    .attr('height', height + 'px')\n    .node();\n\n  const context = canvas.getContext('2d');\n\n\n  const simulation = d3.forceSimulation()\n                .force(\"center\", d3.forceCenter(rangeWidth / 1.8, rangeHeight / 1.8))\n                .force(\"charge\", d3.forceManyBody().strength(-10))\n                .force(\"collision\", d3.forceCollide().radius(function(d) {\n                  return (d.radius * 1.25) * (minExpectedScreenSize / smallerSize);\n                }))\n                .force(\"link\", d3.forceLink().strength(d => d.proximity).id(d => d.id))\n                .velocityDecay(0.96)\n  let k = 0;\n  while ((simulation.alpha() > 1e-2) && (k < 150)) {\n      simulation.tick();\n      k = k + 1;\n  }\n\n  let transform = d3.zoomIdentity;\n\n  initGraph(data)\n\n  function initGraph(tempData){\n\n    function zoomed() {\n      transform = d3.event.transform;\n      simulationUpdate();\n    }\n\n    const zoom = d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed);\n\n    let hoveredNode = undefined;\n    let highlightedNode = undefined;\n    let secondaryNodes = [];\n    let tertiaryNodes = [];\n    \n    const canvasEl = d3.select(canvas);\n    canvasEl\n      .call(zoom)\n      .on('mousemove', function() {\n        hoveredNode = dragsubject();\n        simulationUpdate();\n      })\n      .on('click', function(event) {\n        const node = dragsubject();\n        highlightedNode = node;\n        if (node) {\n          const nodesSortedByDistance = sortBy(tempData.nodes, node2 => {\n            const a = node.x - node2.x;\n            const b = node.y - node2.y;\n            const c = Math.sqrt( a*a + b*b );\n            return c;\n          })\n          // nodes are adjusted by 1 to account for this node always being the closest\n          secondaryNodes = [...nodesSortedByDistance].slice(1,11);\n          tertiaryNodes = [...nodesSortedByDistance].slice(11,31);\n          // const edges = tempData.edges.filter(({source, target}) => source.id === node.id || target.id === node.id)\n          const allEdgeXValues = [];\n          const allEdgeYValues = [];\n          // edges.forEach(({source, target}) => {\n          //   allEdgeXValues.push(xScale(source.x));\n          //   allEdgeXValues.push(xScale(target.x));\n          //   allEdgeYValues.push(yScale(source.y));\n          //   allEdgeYValues.push(yScale(target.y));\n          // });\n          [...secondaryNodes, ...tertiaryNodes].forEach(n => {\n            allEdgeXValues.push(xScale(n.x));\n            allEdgeYValues.push(yScale(n.y));\n          });\n\n          const xBounds = d3.extent(allEdgeXValues);\n          const yBounds = d3.extent(allEdgeYValues);\n          const bounds = [\n            [xBounds[0], yBounds[0]],\n            [xBounds[1], yBounds[1]],\n          ];\n          const dx = bounds[1][0] - bounds[0][0];\n          const dy = bounds[1][1] - bounds[0][1];\n          const x = (bounds[0][0] + bounds[1][0]) / 2;\n          const y = (bounds[0][1] + bounds[1][1]) / 2;\n          const scale = Math.max(1, Math.min(8, 0.9 / Math.max(dx / rangeWidth, dy / rangeHeight)));\n          const translate = [width / 2 - scale * x, height / 2 - scale * y];\n\n          canvasEl.transition()\n              .duration(500)\n              .call( zoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale));\n\n        }\n        simulationUpdate();\n      })\n\n\n\n    function dragsubject() {\n      const x = transform.invertX(d3.event.x);\n      const y = transform.invertY(d3.event.y);\n      for (let i = tempData.nodes.length - 1; i >= 0; --i) {\n        const node = tempData.nodes[i];\n        let nodeX = xScale(node.x);\n        let nodeY = yScale(node.y);\n        const dx = x - nodeX;\n        const dy = y - nodeY;\n\n        if (dx * dx + dy * dy < node.radius * node.radius) {\n\n          nodeX =  transform.applyX(nodeX);\n          nodeY = transform.applyY(nodeY);\n\n          return node;\n        }\n      }\n    }\n\n    simulation.nodes(tempData.nodes)\n              .on(\"tick\", simulationUpdate);\n\n    simulation.force(\"link\")\n              .links(tempData.edges);\n\n\n\n    function simulationUpdate() {\n      // const hoveredId = hoveredNode && hoveredNode.id ? hoveredNode.id : undefined;\n      const highlightedId = highlightedNode && highlightedNode.id ? highlightedNode.id : undefined;\n      // const linkedEdges = tempData.edges.filter(({source, target}) =>\n      //     source.id === hoveredId || target.id === hoveredId ||\n      //     source.id === highlightedId || target.id === highlightedId)\n\n      context.save();\n\n      context.clearRect(0, 0, width, height);\n      context.translate(transform.x, transform.y);\n      context.scale(transform.k, transform.k);\n\n      // tempData.edges.forEach(function(d) {\n      //   context.beginPath();\n      //   context.moveTo(xScale(d.source.x), yScale(d.source.y));\n      //   context.lineTo(xScale(d.target.x), yScale(d.target.y));\n      //   if (highlightedId) {\n      //     context.strokeStyle = '#f9f9f9';\n      //   } else {\n      //     context.strokeStyle = '#e6e6e6';\n      //   }\n      //   context.stroke();\n      // });\n\n      // Draw the nodes\n      tempData.nodes.forEach(function(d, i) {\n        context.beginPath();\n        context.arc(xScale(d.x), yScale(d.y), d.radius, 0, 2 * Math.PI, true);\n        context.fillStyle = highlightedId === undefined ? d.color : polished.rgba(d.color, 0.035);\n        context.fill();\n      });\n\n      // const linkedNodeIds = [];\n      // linkedEdges.forEach(function(d) {\n      //   if (!linkedNodeIds.includes(({id}) => d.source.id)) {\n      //     linkedNodeIds.push(d.source);\n      //   }\n      //   if (!linkedNodeIds.includes(({id}) => d.target.id)) {\n      //     linkedNodeIds.push(d.target);\n      //   }\n      //   // context.beginPath();\n      //   // context.moveTo(xScale(d.source.x), yScale(d.source.y));\n      //   // context.lineTo(xScale(d.target.x), yScale(d.target.y));\n      //   // context.strokeStyle = '#afafaf';\n      //   // context.stroke();\n      // });\n\n      // linkedNodeIds.forEach(function(d, i) {\n      //   if (d) {\n      //     context.beginPath();\n      //     context.arc(xScale(d.x), yScale(d.y), d.radius, 0, 2 * Math.PI, true);\n      //     context.fillStyle = d.color;\n      //     context.fill();\n      //     context.strokeStyle = '#afafaf';\n      //     context.stroke();\n      //   }\n      // });\n\n\n      if (hoveredNode) {\n        rootEl.style.cursor = 'pointer';\n        context.beginPath();\n        context.arc(xScale(hoveredNode.x), yScale(hoveredNode.y), hoveredNode.radius, 0, 2 * Math.PI, true);\n        context.fillStyle = hoveredNode.color\n        context.fill();\n        context.strokeStyle = 'black';\n        context.stroke();\n      } else {\n        rootEl.style.cursor = 'move';\n      }\n      if (highlightedNode) {\n        context.beginPath();\n        context.arc(xScale(highlightedNode.x), yScale(highlightedNode.y), highlightedNode.radius, 0, 2 * Math.PI, true);\n        context.fillStyle = highlightedNode.color\n        context.fill();\n        context.strokeStyle = 'black';\n        context.stroke();\n      }\n      if (secondaryNodes && secondaryNodes.length) {\n        secondaryNodes.forEach(function(d, i) {\n          context.beginPath();\n          context.arc(xScale(d.x), yScale(d.y), d.radius, 0, 2 * Math.PI, true);\n          context.fillStyle = polished.rgba(d.color, 0.8);\n          context.fill();\n        });\n      }\n      if (tertiaryNodes && tertiaryNodes.length) {\n        tertiaryNodes.forEach(function(d, i) {\n          context.beginPath();\n          context.arc(xScale(d.x), yScale(d.y), d.radius, 0, 2 * Math.PI, true);\n          context.fillStyle = polished.rgba(d.color, 0.2);\n          context.fill();\n        });\n      }\n\n      context.restore();\n    }\n  }\n}\n\nexport default () => {\n  const rootNodeRef = useRef(null);\n\n  useEffect(() => {\n    let rootEl = null;\n    if (rootNodeRef && rootNodeRef.current) {\n      rootEl = rootNodeRef.current;\n      createForceGraph(rootEl, data);\n    }\n    return (() => {\n      if (rootEl) {\n        rootEl.innerHTML = '';\n      }\n    })\n  }, [rootNodeRef]);\n\n  return (\n    <div>\n      <div ref={rootNodeRef} />\n    </div>\n  );\n}\n","import React from 'react'\nimport CanvasIndustrySpace from '../components/CanvasIndustrySpaceUMap';\nimport Legend from '../components/BasicLegend';\n\nexport default () => {\n  return (\n    <div>\n      <CanvasIndustrySpace />\n      <Legend />\n    </div>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = __webpack_public_path__ + \"static/media/sector-legend.a4fd20af.png\";","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  pointer-events: none;\n  z-index: 100;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing:  border-box;\n  padding-left: 2rem;\n  padding-bottom: 2rem;\n`;\n\nconst Legend = styled.img`\n  width: 100%;\n  max-width: 800px;\n`;\n\nexport default ({tableLayout}) => {\n  return (\n    <Root\n      style={{paddingRight: tableLayout ? 550 : undefined}}\n    >\n      <Legend src={require('../sector-legend.png')} />\n    </Root>\n  );\n}\n"],"sourceRoot":""}